// This file is based on the Jenkins declarative pipeline syntax (as opposed to the scripted pipeline syntax)
// https://jenkins.io/doc/book/pipeline/syntax/
// https://jenkins.io/blog/2017/02/03/declarative-pipeline-ga/

repoUrl = "https://github.com/xamarin/xamarin-android.git"
XADir = "xamarin-android"
WorkDir = "~/jenkins/workspace/$XADir"

MSBUILD_AUTOPROVISION_ARGS="/p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False"

pipeline {
    
    agent {
        label 'xamarin-android-master-pipeline-eval'
    }

    options {
        timestamps()
        skipStagesAfterUnstable()
    }

    stages {
        stage('clean') {
            steps {
                dir('package') {
                    deleteDir()
                }

                dir('package.tests') {
                    deleteDir()
                }

                dir('xamarin-android@tmp') {
                    deleteDir()
                }
            }   
        }
    
        stage('prepare deps') {
            options { timeout(time: 30, unit: 'MINUTES') }     // Typically takes less than 2 minutes
            steps {
                dir("$XADir") {
                    sh "make prepare-deps CONFIGURATION=${env.BuildFlavor} V=1 MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                }
            }
        }
        
        stage('build') {
            options { timeout(time: 3, unit: 'HOURS') }     // Typically takes less than 2 hours
            steps {
                dir("$XADir") {
                    sh "make jenkins CONFIGURATION=${env.BuildFlavor} V=1 MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                }
            }
        }
        
        stage('create vsix') {
            options { timeout(time: 30, unit: 'MINUTES') }     // Typically takes less than 5 minutes
            steps {
                dir("$XADir") {
                    // UNDONE: What was the reason within the freestyle build for returning true on failure - is okay to ignore VSIX creation failures?
                    // sh "make create-vsix CONFIGURATION=${BuildFlavor} V=1 || true"
                    sh "make create-vsix CONFIGURATION=${env.BuildFlavor} V=1"
                }
            }
        }
        
        stage('build tests') {
            options { timeout(time: 30, unit: 'MINUTES') }     // Typically takes 10 minutes

            steps {
                dir("$XADir") {
                    sh "make all-tests CONFIGURATION=${env.BuildFlavor} V=1"
                }
            }
        }
        
        stage('package build') {
            options { timeout(time: 10, unit: 'MINUTES') }  // Typically takes less than 1 minute
            steps {
                dir("$XADir") {
                    sh('mkdir -p ../package')
                    sh("make package-build-status CONFIGURATION=${env.BuildFlavor}")
                    
                    sh('cp xamarin.android-oss*.zip ../package')
                    sh('cp bin/Release/bundle-*.zip ../package')
                    sh('cp bin/Build*/Xamarin.Android.Sdk*.vsix ../package')
                    sh('cp xa-build-status* ../package')                                // At a minimum includes the build status ZIP file
                    sh('cp build-status* ../package 2>/dev/null')                       // Files may not exist and so pipe to null
                    sh('cp prepare-image-dependencies.sh ../package 2>/dev/null')       // Files may not exist and so pipe to null
                }
            }
        }
        
        stage('publish packages to Azure') {
            options { timeout(time: 10, unit: 'MINUTES') }  // Typically takes less than 2 minutes
            steps {
                dir('package') {
                    echo "Azure storage account: https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/7b4817ae-218f-464a-bab1-a9df2d99e1e5/resourceGroups/Group/providers/Microsoft.ClassicStorage/storageAccounts/xamjenkinsartifact/overview"
                    step([$class: 'WAStoragePublisher', allowAnonymousAccess: false, cleanUpContainer: false, cntPubAccess: false, containerName: "${env.ContainerName}", doNotFailIfArchivingReturnsNothing: false,
                        doNotUploadIndividualFiles: false, doNotWaitForPreviousBuild: false, excludeFilesPath: '',
                        filesPath: '*.*', storageAccName: "${env.StorageAccountName}", storageCredentialId: "${env.StorageCredentialId}",
                        uploadArtifactsOnlyIfSuccessful: false, usploadZips: false, virtualPath: "${env.StorageVirtualPath}", storageType: 'blobstorage'
                    ])
                }
            }
        }
        
        stage('run all tests') {
            options { timeout(time: 160, unit: 'MINUTES') }     // XA tests typically take 1 hr, 40 minutes to run; timeout after 2 hrs, 40 minutes
            steps {
                dir("$XADir") {
                    sh("make run-all-tests CONFIGURATION=${BuildFlavor} V=1")
                }
            }   
        }
        
        stage('package tests') {
            options { timeout(time: 30, unit: 'SECONDS') }
            steps {
                dir("$XADir") {                    
                    sh '''
                    if [ -d "xamarin-android/xa-test-errors" ]; then
                        mkdir -p ../package.tests                                           // Note: Signal publishing of the test error logs by creating the directory
                        cp xamarin-android/xa-test-errors/* ../package.tests 2>/dev/null
                    fi
                    '''
                }
            }
        }

        stage('publish test error logs to Azure') {
            options { timeout(time: 10, unit: 'MINUTES') }  // Typically takes less than 2 minutes
            steps {
                script {                                    // Enter scripted/groovy mode
                    if (fileExists('package.tests')) {      // Note: fileExists works for directories too
                        dir('package.tests') {
                            echo "Publishing contents of the package.tests directory to Azure storage"
                            echo "Azure storage account: https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/7b4817ae-218f-464a-bab1-a9df2d99e1e5/resourceGroups/Group/providers/Microsoft.ClassicStorage/storageAccounts/xamjenkinsartifact/overview"
                            step([$class: 'WAStoragePublisher', allowAnonymousAccess: false, cleanUpContainer: false, cntPubAccess: false, containerName: "${env.ContainerName}", doNotFailIfArchivingReturnsNothing: false,
                                doNotUploadIndividualFiles: false, doNotWaitForPreviousBuild: false, excludeFilesPath: '',
                                filesPath: '*.*', storageAccName: "${env.StorageAccountName}", storageCredentialId: "${env.StorageCredentialId}",
                                uploadArtifactsOnlyIfSuccessful: false, usploadZips: false, virtualPath: "${env.StorageVirtualPath}", storageType: 'blobstorage'
                            ])
                        }
                    } else {
                        echo "package.tests directory containing xa-test-error logs does not exist and so skipping publishing of those logs"
                    }
                }
            }
        }
        
        stage ('Plot build times') {
            options { timeout(time: 30, unit: 'SECONDS') }      // Typically takes less than a second
            steps {
                dir("$XADir") {                    
                    plot(
                        title: 'Jcw',                        
                        csvFileName: 'plot-jcw-test-times.csv',       
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.JcwGen_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Locale',
                        csvFileName: 'plot-locale-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.Locale_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime test sizes',
                        csvFileName: 'plot-runtime-test-sizes.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime merged',
                        csvFileName: 'plot-runtime-merged-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app startup',
                        csvFileName: 'plot-xamarin-forms-startup-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Test-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app',
                        csvFileName: 'plot-xamarin-forms-tests-size.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )

                    // UNDONE: Safe to remove?
                    //plot(
                    //    title: '[History] (before the graphs were split up)',
                    //    csvFileName: 'plot-build-times.csv',
                    //    csvSeries: [[
                    //        displayTableFlag: true, file: 'TestResult-MSBuild-times.csv', inclusionFlag: 'OFF'
                    //    ]],
                    //    group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    //)        			

                    plot(
                        title: 'Hello World',
                        csvFileName: 'plot-hello-world-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-HelloWorld.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    
                    plot(
                        title: 'Xamarin.Forms',
                        csvFileName: 'plot-xamarin-forms-integration-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-Xamarin.Forms-Integration.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                }
            }
        }
    }
}
