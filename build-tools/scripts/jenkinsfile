// This file is based on the Jenkins declarative pipeline syntax (as opposed to the scripted pipeline syntax)
// https://jenkins.io/doc/book/pipeline/syntax/
// https://jenkins.io/blog/2017/02/03/declarative-pipeline-ga/

def botLabel = 'xamarin-android-master-pipeline-eval'

def XADir = "xamarin-android"

def publishBuildFilePaths = null
def publishTestFilePaths = null

def MSBUILD_AUTOPROVISION_ARGS="/p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False"

def isPr = false                // Default to CI

def processBuildStatus() {
    def status = 0

    try {
        echo "processing build status"
        sh "make package-build-status CONFIGURATION=${env.BuildFlavor}"
    } catch (error) {
        echo "ERROR : NON-FATAL : processBuildStatus: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def publishPackages(filePaths) {
    def status = 0
    try {
         // Note: The following function is provided by the Azure Blob Jenkins plugin
         azureUpload(storageCredentialId: "${env.StorageCredentialId}",
                                storageType: "blobstorage",
                                containerName: "${env.ContainerName}",
                                virtualPath: "${env.StorageVirtualPath}",
                                filesPath: "${filePaths}",
                                allowAnonymousAccess: true,
                                pubAccessible: true,
                                doNotWaitForPreviousBuild: true,
                                uploadArtifactsOnlyIfSuccessful: true)
    } catch (error) {
        echo "ERROR : publishPackages: Unexpected error: ${error}"
        status = 1
    }

    return status
}

timestamps {
    node("${botLabel}") {
        timeout(time: 30, unit: 'SECONDS') {    // Typically takes less than a second
            stage('init') {
                // Note: PR plugin environment variable settings available here: https://wiki.jenkins.io/display/JENKINS/GitHub+pull+request+builder+plugin
                isPr = env.ghprbActualCommit != null
                def branch = env.GIT_BRANCH
                def commit = isPr ? env.ghprbActualCommit : env.GIT_COMMIT
                def buildType = isPr ? 'PR' : 'CI'

                echo "Job: ${env.JOB_BASE_NAME}"
                echo "Branch: ${branch}"
                echo "Commit: ${commit}"
                echo "Build type: ${buildType}"
                if (isPr) {
                    echo "PR id: ${env.ghprbPullId}"
                    echo "PR link: ${env.ghprbPullLink}"
                }

                publishBuildFilePaths = "xamarin-android/xamarin.android-oss*.zip,xamarin-android/bin/${env.BuildFlavor}/bundle-*.zip,xamarin-android/bin/Build*/Xamarin.Android.Sdk*.vsix,xamarin-android/prepare-image-dependencies.sh,xamarin-android/build-status*,xamarin-android/xa-build-status*";
                publishTestFilePaths = "xamarin-android/xa-test-errors*"
            }
        }

        timeout(time: 30, unit: 'SECONDS') {    // Typically takes less than a second
            stage('clean') {
                dir('xamarin-android@tmp') {
                    deleteDir()
                }

                if (fileExists('TestResult.xml')) {
                    sh('rm TestResult.xml')
                }
            }
        }

        timeout(time: 30, unit: 'MINUTES') {    // Typically takes less than 2 minutes
            stage('prepare deps') {

                dir("$XADir") {
                        sh "make prepare-deps CONFIGURATION=${env.BuildFlavor} MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                }

                echo "Stage result: prepare deps: ${currentBuild.currentResult}"
            }
        }

        timeout(time: 6, unit: 'HOURS') {    // Typically takes less than one hour
            stage('build') {
                dir("$XADir") {
                    script {
                        if (isPr) {
                            echo "PR build definition detected: building with 'make all'"
                            sh "make all CONFIGURATION=${env.BuildFlavor} MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                        } else {
                            echo "PR build definition *not* detected: building with 'make jenkins'"
                            sh "make jenkins CONFIGURATION=${env.BuildFlavor} MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                        }
                    }
                }

                echo "Stage result: build: ${currentBuild.currentResult}"
            }
        }

        timeout(time: 30, unit: 'MINUTES') {    // Typically takes less than 5 minutes
            stage('create vsix') {
                dir("$XADir") {
                    sh "make create-vsix CONFIGURATION=${env.BuildFlavor}"
                }

                echo "Stage result: create vsix: ${currentBuild.currentResult}"
            }
        }

        timeout(time: 30, unit: 'MINUTES') {    // Typically takes less than 10 minutes
            stage('build tests') {
                dir("$XADir") {
                    sh "make all-tests CONFIGURATION=${env.BuildFlavor}"
                }

                echo "Stage result: build tests: ${currentBuild.currentResult}"
            }
        }

        timeout(time: 10, unit: 'MINUTES') {    // Typically takes less than a minute
            stage('process build results') {
                dir("$XADir") {
                    processBuildStatus()
                }

                echo "Stage result: process build results: ${currentBuild.currentResult}"
            }
        }

        timeout(time: 10, unit: 'MINUTES') {    // Typically takes less than a minute
            try {
                stage('publish packages to Azure') {
                    echo "publishBuildFilePaths: ${publishBuildFilePaths}"
                    def status = publishPackages(publishBuildFilePaths)

                    if (status != 0) {
                        throw new Exception("publish packages to Azure FAILED")
                    }
                }

            } catch (error) {
                echo "ERROR : package publish failed with status ${status}. Marking build as UNSTABLE"
                currentBuild.result = 'UNSTABLE'
            }

            echo "Stage result: publish packages to Azure: ${currentBuild.currentResult}"
        }

        timeout(time: 160, unit: 'MINUTES') {    // XA tests typically take 1 hr, 40 minutes to run; timeout after 2 hrs, 40 minutes
            def status = 0
            try {
                stage('run all tests') {
                    dir("$XADir") {
                        echo "running tests"
                        status = sh(
                            script: "make run-all-tests CONFIGURATION=${env.BuildFlavor}",
                            returnStatus: true
                        );

                        if (status != 0) {
                            throw new Exception("run-all-tests FAILED")     // This will cause the stage to be labeled as 'failed' (red text) within the context of the stage being marked 'UNSTABLE' (yellow background)
                        }
                    }
                }
            } catch (error) {
                echo "ERROR : test run failed with status ${status}. Marking build as UNSTABLE"
                currentBuild.result = 'UNSTABLE'
            }

            echo "Stage result: run all tests: current build result: ${currentBuild.currentResult} / status: ${status}"
        }

        timeout(time: 10, unit: 'MINUTES') {    // Typically takes less than 2 minutes
            stage('publish test error logs to Azure') {
                dir('xamarin-android') {
                    echo "packaging test error logs"
                    sh "make package-test-errors"
                }

                echo "publishTestFilePaths: ${publishTestFilePaths}"
                def status = publishPackages(publishTestFilePaths)

                echo "Stage result: publish test error logs to Azure: ${currentBuild.currentResult} / status: ${status}"
            }
        }

        timeout(time: 30, unit: 'SECONDS') {    // Typically takes less than a second
            stage('Plot build & test metrics') {
                dir("$XADir") {
                    plot(
                        title: 'Jcw',                        
                        csvFileName: 'plot-jcw-test-times.csv',       
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.JcwGen_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Locale',
                        csvFileName: 'plot-locale-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.Locale_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime test sizes',
                        csvFileName: 'plot-runtime-test-sizes.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime merged',
                        csvFileName: 'plot-runtime-merged-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app startup',
                        csvFileName: 'plot-xamarin-forms-startup-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Test-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app',
                        csvFileName: 'plot-xamarin-forms-tests-size.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )

                    plot(
                        title: 'Hello World',
                        csvFileName: 'plot-hello-world-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-HelloWorld.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    
                    plot(
                        title: 'Xamarin.Forms',
                        csvFileName: 'plot-xamarin-forms-integration-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-Xamarin.Forms-Integration.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                }

                echo "Stage result: Plot build & test metrics: ${currentBuild.currentResult}"
            }
        }

        timeout(time: 5, unit: 'MINUTES') {    // Typically takes under 1 minute to upload test results
            try {
                stage('Upload test results') {
                        xunit thresholds: [
                                failed(unstableNewThreshold: '0', unstableThreshold: '0'),
                                skipped()                                                       // Note: Empty threshold settings per settings in the xamarin-android freestyle build are not permitted here
                            ],
                            tools: [
                                NUnit2(deleteOutputFiles: true,
                                failIfNotNew: true,
                                pattern: 'xamarin-android/TestResult-*.xml',
                                skipNoTestFiles: true,
                                stopProcessingIfError: false)
                            ]
                }

            } catch (error) {
                echo "ERROR : Upload test results: Unexpected error: ${error}. Marking build as UNSTABLE"
                currentBuild.result = 'UNSTABLE'
            }

            echo "Stage result: Upload test results: ${currentBuild.currentResult}"
        }
    }
}
