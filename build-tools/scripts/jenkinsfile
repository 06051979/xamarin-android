// This file is based on the Jenkins declarative pipeline syntax (as opposed to the scripted pipeline syntax)
// https://jenkins.io/doc/book/pipeline/syntax/
// https://jenkins.io/blog/2017/02/03/declarative-pipeline-ga/

def botLabel = 'xamarin-android-master-pipeline-eval'

def XADir = "xamarin-android"

def publishBuildFilePaths = null
def publishTestFilePaths = null

def MSBUILD_AUTOPROVISION_ARGS="/p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False"

def buildStatusProcessed = false
def buildStatusUploaded = false

def isPR = false                // Default to CI

def processBuildStatus() {
    def status = 0

    try {
        echo "processing build status"
        sh "make package-build-status CONFIGURATION=${env.BuildFlavor}"
    } catch (error) {
        echo "ERROR : NON-FATAL : processBuildStatus: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def publishPackages(filePaths) {
    def status = 0
    try {
         // Note: The following function is provided by the Azure Blob Jenkins plugin
         azureUpload(storageCredentialId: "${env.StorageCredentialId}",
                                storageType: "blobstorage",
                                containerName: "${env.ContainerName}",
                                virtualPath: "${env.StorageVirtualPath}",
                                filesPath: "${filePaths}",
                                allowAnonymousAccess: true,
                                pubAccessible: true,
                                doNotWaitForPreviousBuild: true,
                                uploadArtifactsOnlyIfSuccessful: true)
    } catch (error) {
        echo "ERROR : publishPackages: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def cleanFiles(path) {
    // path can include wildcard characters

    def status = 0

    try {

        script {
            sh """
            # Note: Escape dollar \$ even in bash comments to avoid groovy templating errors; use non-escaped dollar to expand groovy variables
            for file in `ls ${path}`; do
                [ -f "\$file" ] || continue
                echo "Cleaning file '\${file}''"
                rm -f "\$file"
            done
            """
        }

    } catch (error) {
        echo "ERROR : cleanFiles: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def cleanDirectories(path) {
    // path can include wildcard characters

    def status = 0

    try {
        sh """
            # Note: Escape dollar \$ even in bash comments to avoid groovy templating errors; use non-escaped dollar to expand groovy variables
            for dir in `ls -d ${path}`; do
                [ -d "\$dir" ] || continue
                echo "Cleaning directory '\${dir}''"
                rm -rf "\$dir"
            done
        """
    } catch (error) {
        echo "ERROR : cleanDirectories: Unexpected error: ${error}"
        status = 1
    }

    return status
}

pipeline {
    
    agent {
        label "${botLabel}"
    }

    options {
        timestamps()
    }

    stages {
        stage('init') {
            steps {
                script {
                    echo "GIT_BRANCH: ${env.GIT_BRANCH}"
                    echo "CHANGE_TARGET: ${env.CHANGE_TARGET}"

                    publishBuildFilePaths = "xamarin-android/xamarin.android-oss*.zip,xamarin-android/bin/${env.BuildFlavor}/bundle-*.zip,xamarin-android/bin/Build*/Xamarin.Android.Sdk*.vsix,xamarin-android/prepare-image-dependencies.sh,xamarin-android/build-status*,xamarin-android/xa-build-status*";
                    echo "init: publishBuildFilePaths: ${publishBuildFilePaths}"

                    publishTestFilePaths = "xamarin-android/xa-test-errors*"
                    echo "init: publishTestFilePaths: ${publishTestFilePaths}"

                    echo "init: env.JOB_BASE_NAME: ${env.JOB_BASE_NAME}"
                    if (env.JOB_BASE_NAME?.toLowerCase().startsWith("xamarin-android-pr")) {
                        echo "Build type: PR"
                        isPR = true
                    } else {
                        echo "Build type: CI"
                    }
                }

                echo "Stage result: init: ${currentBuild.currentResult}"
            }
        }

        stage('clean') {
            steps {

                // Note: 'package' and 'package.tests' directories are deprecated locations. Keep the cleansing in place for now to remove these locations off the build bots
                dir('package') {
                    deleteDir()
                }

                dir('package.tests') {
                    deleteDir()
                }

                dir('xamarin-android@tmp') {
                    deleteDir()
                }

                dir ('xamarin-android/package-test-errors') {
                    deleteDir()
                }

                dir('xamarin-android') {
                    script {
                        echo "Cleaning build outputs: xamarin.android-oss*.zip, bin/${env.BuildFlavor}/bundle-*.zip, bin/Build*/Xamarin.Android.Sdk*.vsix"
                        cleanFiles("xamarin.android-oss*.zip")
                        cleanFiles("bin/${env.BuildFlavor}/bundle-*.zip")
                        cleanFiles("bin/Build*/Xamarin.Android.Sdk*.vsix")

                        echo "Cleaning xa-build-status*"
                        cleanFiles("xa-build-status*.zip")
                        cleanDirectories("xa-build-status*")
                        cleanFiles("build-status*")

                        echo "Cleaning xa-test-errors*"
                        cleanFiles("xa-test-errors*.zip")
                        cleanDirectories("xa-test-errors*")

                        echo "Cleaning prepare-image-dependencies.sh"
                        sh "rm -f prepare-image-dependencies.sh"

                        echo "Cleaning test result files 'TestResult-*.xml'"
                        cleanFiles("TestResult-*.xml")

                        // Avoid: EXEC : error : jnimarshalmethod-gen: Unable to create Java VM
                        def XAInstallPrefix = "bin/${env.BuildFlavor}/lib/xamarin.android"

                        def javaInteropDllConfigFile = "${XAInstallPrefix}/xbuild/Xamarin/Android/Java.Interop.dll.config"
                        if (fileExists(javaInteropDllConfigFile)) {
                            echo "Cleansing file '${javaInteropDllConfigFile}'"
                            sh "rm -f ${javaInteropDllConfigFile}"
                        }

                        def javaEnvironmentConfigFile = "${XAInstallPrefix}/xbuild/Xamarin/Android/Java.Runtime.Environment.dll.config"
                        if (fileExists(javaEnvironmentConfigFile)) {
                            echo "Cleansing file '${javaEnvironmentConfigFile}'"
                            sh "rm -f ${javaEnvironmentConfigFile}"
                        }
                    }
                }

                echo "Stage result: clean: ${currentBuild.currentResult}"
            }   
        }
    
        stage('prepare deps') {
            options {
                timeout(time: 30, unit: 'MINUTES')  // Typically takes less than 2 minutes
            }

            steps {
                dir("$XADir") {
                    sh "make prepare-deps CONFIGURATION=${env.BuildFlavor} MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                }

                echo "Stage result: prepare deps: ${currentBuild.currentResult}"
            }
        }
        
        stage('build') {
            options {
                timeout(time: 6, unit: 'HOURS')     // Typically takes less than 2 hours
            }
            steps {
                dir("$XADir") {
                    script {
                        if (isPR) {
                            echo "PR build definition detected: building with 'make all'"
                            sh "make all CONFIGURATION=${env.BuildFlavor} MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                        } else {
                            echo "PR build definition *not* detected: building with 'make jenkins'"
                            sh "make jenkins CONFIGURATION=${env.BuildFlavor} MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                        }
                    }
                }

                echo "Stage result: build: ${currentBuild.currentResult}"
            }
        }
        
        stage('create vsix') {
            options {
                timeout(time: 30, unit: 'MINUTES')  // Typically takes less than 5 minutes
            }

            steps {
                dir("$XADir") {
                    sh "make create-vsix CONFIGURATION=${env.BuildFlavor}"
                }

                echo "Stage result: create vsix: ${currentBuild.currentResult}"
            }
        }
        
        stage('build tests') {
            options {
                timeout(time: 30, unit: 'MINUTES')       // Typically takes 10 minutes
            }

            steps {
                dir("$XADir") {
                    sh "make all-tests CONFIGURATION=${env.BuildFlavor}"
                }

                echo "Stage result: build tests: ${currentBuild.currentResult}"
            }
        }
        
        stage ('process build results') {
            options {
                timeout(time: 10, unit: 'MINUTES')      // Typically takes less than a minute
            }

            steps {
                script {
                    dir("$XADir") {
                        def status = processBuildStatus()

                        if (status == 0) {
                            buildStatusProcessed = true
                        }
                    }
                }

                echo "Stage result: process build results: ${currentBuild.currentResult}"
            }
        }

        stage('publish packages to Azure') {
            options {
                timeout(time: 10, unit: 'MINUTES')    // Typically takes less than 2 minutes
            }

            steps {
                script {
                    def status = publishPackages(publishBuildFilePaths)
                    if (status == 0) {
                        buildStatusUploaded = true
                    }
                }

                echo "Stage result: publish packages to Azure: ${currentBuild.currentResult}"
            }
        }
        
        stage('run all tests') {
            options {
                timeout(time: 160, unit: 'MINUTES')     // XA tests typically take 1 hr, 40 minutes to run; timeout after 2 hrs, 40 minutes
            }

            steps {
                dir("$XADir") {
                    script {
                        def status = 0
                        try
                        {
                            echo "running tests"
                            status = sh(
                                script: "make run-all-tests CONFIGURATION=${env.BuildFlavor}",
                                returnStatus: true
                            );
                        } catch (error) {
                            echo "ERROR : Unexpected error: ${error}"
                            status = 1
                        } finally {
                            if (status != 0) {
                                echo "ERROR : test run failed with status ${status}. Marking build as UNSTABLE"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }

                        echo "Stage result: run all tests: status: ${status} / current build result: ${currentBuild.currentResult}"
                    }
                }
            }   
        }
        
        stage('publish test error logs to Azure') {
            when {
                expression { isPR == true }
            }

            options {
                timeout(time: 10, unit: 'MINUTES')        // Typically takes less than 2 minutes
            }

            steps {
                script {
                    def status = publishPackages(publishTestFilePaths)

                    echo "Stage result: publish test error logs to Azure: ${currentBuild.currentResult} / status: ${status}"
                }
            }
        }
        
        stage ('Plot build & test metrics') {
            options {
                timeout(time: 30, unit: 'SECONDS')      // Typically takes less than a second
            }

            steps {
                dir("$XADir") {
                    plot(
                        title: 'Jcw',                        
                        csvFileName: 'plot-jcw-test-times.csv',       
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.JcwGen_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Locale',
                        csvFileName: 'plot-locale-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.Locale_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime test sizes',
                        csvFileName: 'plot-runtime-test-sizes.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime merged',
                        csvFileName: 'plot-runtime-merged-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app startup',
                        csvFileName: 'plot-xamarin-forms-startup-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Test-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app',
                        csvFileName: 'plot-xamarin-forms-tests-size.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )

                    plot(
                        title: 'Hello World',
                        csvFileName: 'plot-hello-world-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-HelloWorld.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    
                    plot(
                        title: 'Xamarin.Forms',
                        csvFileName: 'plot-xamarin-forms-integration-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-Xamarin.Forms-Integration.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                }

                echo "Stage result: Plot build & test metrics: ${currentBuild.currentResult}"
            }
        }

        stage('Upload test results') {
            options {
                timeout(time: 5, unit: 'MINUTES')       // Typically takes under 1 minute to upload test results
            }

            steps {
                script {
                    try {
                        xunit thresholds: [
                                failed(unstableNewThreshold: '0', unstableThreshold: '0'),
                                skipped()                                                       // Note: Empty threshold settings per settings in the xamarin-android freestyle build are not permitted here
                            ],
                            tools: [
                                NUnit2(deleteOutputFiles: true,
                                failIfNotNew: true,
                                pattern: 'xamarin-android/TestResult-*.xml',
                                skipNoTestFiles: true,
                                stopProcessingIfError: false)
                            ]
                    } catch (error) {
                        echo "ERROR : Upload test results: Unexpected error: ${error}. Marking build as UNSTABLE"
                        currentBuild.result = 'UNSTABLE'
                    }
                }

                echo "Stage result: Upload test results: ${currentBuild.currentResult}"
            }
        }
    }

    post {
        // Attempt to process & upload build results if the initial attempt to process and upload the logs failed
        always {
            script {
                dir ("$XADir") {
                    def status = 0

                    if (!buildStatusUploaded) {
                        echo "ERROR : RETRYING: Build status logs failed during 'publish packages to Azure' stage"

                        if (!buildStatusProcessed) {
                            echo "Retrying processing of build status logs"
                            status = processBuildStatus()
                        }

                        if (status == 0) {
                            status = publishPackages(publishBuildFilePaths)
                        }

                        if (status != 0) {
                            echo "ERROR : Publishing of build status logs failed"
                        }
                    }
                }
            }
        }
    }
}