// This file is based on the Jenkins declarative pipeline syntax (as opposed to the scripted pipeline syntax)
// https://jenkins.io/doc/book/pipeline/syntax/
// https://jenkins.io/blog/2017/02/03/declarative-pipeline-ga/

def repoUrl = "https://github.com/xamarin/xamarin-android.git"
def XADir = "xamarin-android"

def MSBUILD_AUTOPROVISION_ARGS="/p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False"

def buildStatusProcessed = false
def buildStatusUploaded = false

def processAndStageBuildResults(xaDir) {
    def status = 0
    try {
        def packageDir = "${env.WORKSPACE}/package"
        echo "packageDir is set to '${packageDir}'"

        if (!fileExists(packageDir)) {
            sh "mkdir -p \"${packageDir}\""
        }

        echo "processing & packaging build status"
        sh "cd ${env.WORKSPACE}/${xaDir}"
        sh "make package-build-status CONFIGURATION=${env.BuildFlavor}"
        sh "cp xa-build-status*.zip ${packageDir}"

    } catch (error) {
        echo "processAndStageBuildResults: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def publishPackages() {
    def status = 0
    try {
        def packageDir = "${env.WORKSPACE}/package"
        sh "cd ${packageDir}"

        echo "Publishing to Azure storage account: https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/7b4817ae-218f-464a-bab1-a9df2d99e1e5/resourceGroups/Group/providers/Microsoft.ClassicStorage/storageAccounts/xamjenkinsartifact/overview"
        step([$class: 'WAStoragePublisher', allowAnonymousAccess: false, cleanUpContainer: false, cntPubAccess: false, containerName: "${env.ContainerName}", doNotFailIfArchivingReturnsNothing: false,
            doNotUploadIndividualFiles: false, doNotWaitForPreviousBuild: false, excludeFilesPath: '',
            filesPath: '*.*', storageAccName: "${env.StorageAccountName}", storageCredentialId: "${env.StorageCredentialId}",
            uploadArtifactsOnlyIfSuccessful: false, usploadZips: false, virtualPath: "${env.StorageVirtualPath}", storageType: 'blobstorage'
        ])

    } catch (error) {
        echo "publishPackages: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def processAndUploadBuildLogs(xaDir, buildStatusProcessed, buildStatusUploaded) {
    def status = 0
    if (!buildStatusProcessed) {
        status = processAndStageBuildResults(xaDir)
    }

    if (status == 0 && !buildStatusUploaded) {
        status = publishPackages()
    }
}

pipeline {
    
    agent {
        label 'xamarin-android-master-pipeline-eval'
    }

    options {
        timestamps()
        skipStagesAfterUnstable()
    }

    stages {
        stage('clean') {
            steps {
                dir('package') {
                    deleteDir()
                }

                dir('package.tests') {
                    deleteDir()
                }

                dir('xamarin-android@tmp') {
                    deleteDir()
                }

                dir('xamarin-android') {
                    echo "Cleaning build status files "

                    sh "rm -f xa-build-status*.zip"

                    sh '''
                    for dir in `ls -d xa-build-status*`; do
                        [ -d "$dir" ] || continue
                        echo "Cleaning directory '${dir}''"
                        rm -rf "$dir"
                    done
                    '''
                }
            }   
        }
    
        stage('prepare deps') {
            options { timeout(time: 30, unit: 'MINUTES') }     // Typically takes less than 2 minutes
            steps {
                dir("$XADir") {
                    sh "make prepare-deps CONFIGURATION=${env.BuildFlavor} V=1 MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                }
            }
        }
        
        stage('build') {
            options { timeout(time: 3, unit: 'HOURS') }     // Typically takes less than 2 hours
            steps {
                dir("$XADir") {
                    sh "make jenkins CONFIGURATION=${env.BuildFlavor} V=1 MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                }
            }
        }
        
        stage('create vsix') {
            options { timeout(time: 30, unit: 'MINUTES') }     // Typically takes less than 5 minutes
            steps {
                dir("$XADir") {
                    sh "make create-vsix CONFIGURATION=${env.BuildFlavor} V=1"
                }
            }
        }
        
        stage('build tests') {
            options { timeout(time: 30, unit: 'MINUTES') }     // Typically takes 10 minutes

            steps {
                dir("$XADir") {
                    sh "make all-tests CONFIGURATION=${env.BuildFlavor} V=1"
                }
            }
        }
        
        stage('package build') {
            options { timeout(time: 10, unit: 'MINUTES') }  // Typically takes less than 1 minute
            steps {
                dir("$XADir") {
                    script {
                        def status = processAndStageBuildResults(XADir)

                        if (fileExists('prepare-image-dependencies.sh')) {
                            echo 'Staging prepare-image-dependencies.sh for publishing'
                            sh 'cp prepare-image-dependencies.sh ../package'
                        }

                        if (status != 0) {
                            currentBuild.result = 'UNSTABLE'
                        } else {
                            buildStatusProcessed = true
                        }
                    }
                }
            }
        }
        
        stage('publish packages to Azure') {
            options { timeout(time: 10, unit: 'MINUTES') }  // Typically takes less than 2 minutes
            steps {
                dir('package') {
                    script {
                        def status = publishPackages()
                        if (status != 0) {
                            currentBuild.result = 'FAILURE'
                        } else {
                            buildStatusUploaded = true
                        }
                    }
                }
            }
        }
        
        stage('run all tests') {
            options { timeout(time: 160, unit: 'MINUTES') }     // XA tests typically take 1 hr, 40 minutes to run; timeout after 2 hrs, 40 minutes
            steps {
                dir("$XADir") {
                    script {
                        def status = 0
                        try
                        {
                            echo "running tests"
                            status = sh(
                                script: "make run-all-tests CONFIGURATION=${BuildFlavor} V=1",
                                returnStatus: true
                            );
                        } catch (error) {
                            echo "stage 'run all tests' failed. Error: ${error}"
                            status = 1;
                        } finally {
                            if (status != 0) {
                                echo "test run failed marking build as UNSTABLE"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }   
        }
        
        stage('package tests') {
            options { timeout(time: 30, unit: 'SECONDS') }
            steps {
                dir("$XADir") {                    
                    sh '''
                    if [ -d "xamarin-android/xa-test-errors" ]; then
                        mkdir -p ../package.tests                                           // Note: Signal publishing of the test error logs by creating the directory
                        cp xamarin-android/xa-test-errors/*.zip ../package.tests
                    fi
                    '''
                }
            }
        }

        stage('publish test error logs to Azure') {
            options { timeout(time: 10, unit: 'MINUTES') }  // Typically takes less than 2 minutes
            steps {
                script {
                    if (fileExists('package.tests')) {      // Note: fileExists works for directories too
                        dir('package.tests') {
                            echo "Publishing contents of the package.tests directory to Azure storage"
                            echo "Azure storage account: https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/7b4817ae-218f-464a-bab1-a9df2d99e1e5/resourceGroups/Group/providers/Microsoft.ClassicStorage/storageAccounts/xamjenkinsartifact/overview"
                            step([$class: 'WAStoragePublisher', allowAnonymousAccess: false, cleanUpContainer: false, cntPubAccess: false, containerName: "${env.ContainerName}", doNotFailIfArchivingReturnsNothing: false,
                                doNotUploadIndividualFiles: false, doNotWaitForPreviousBuild: false, excludeFilesPath: '',
                                filesPath: '*.*', storageAccName: "${env.StorageAccountName}", storageCredentialId: "${env.StorageCredentialId}",
                                uploadArtifactsOnlyIfSuccessful: false, usploadZips: false, virtualPath: "${env.StorageVirtualPath}", storageType: 'blobstorage'
                            ])
                        }
                    } else {
                        echo "package.tests directory containing xa-test-error logs does not exist and so skipping publishing of those logs"
                    }
                }
            }
        }
        
        stage ('Plot build & test metrics') {
            options { timeout(time: 30, unit: 'SECONDS') }      // Typically takes less than a second
            steps {
                dir("$XADir") {
                    plot(
                        title: 'Jcw',                        
                        csvFileName: 'plot-jcw-test-times.csv',       
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.JcwGen_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Locale',
                        csvFileName: 'plot-locale-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.Locale_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime test sizes',
                        csvFileName: 'plot-runtime-test-sizes.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime merged',
                        csvFileName: 'plot-runtime-merged-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app startup',
                        csvFileName: 'plot-xamarin-forms-startup-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Test-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app',
                        csvFileName: 'plot-xamarin-forms-tests-size.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )

                    plot(
                        title: 'Hello World',
                        csvFileName: 'plot-hello-world-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-HelloWorld.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    
                    plot(
                        title: 'Xamarin.Forms',
                        csvFileName: 'plot-xamarin-forms-integration-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-Xamarin.Forms-Integration.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                }
            }
        }

        stage('Upload test results') {
            options { timeout(time: 30, unit: 'SECONDS') }
            steps {
                dir("$XADir") {
                    xunit thresholds: [
                            failed(unstableNewThreshold: '0', unstableThreshold: '0'),
                            skipped(unstableNewThreshold: '0', unstableThreshold: '0')
                        ],
                        tools: [
                            NUnit2(deleteOutputFiles: true,
                            failIfNotNew: true,
                            pattern: 'TestResult-*.xml',
                            skipNoTestFiles: true,
                            stopProcessingIfError: false)
                        ]
                }
            }
        }
    }

    post {
        // Attempt to process & upload build results even if the build was unstable or failed
        unstable {
            script {
                processAndUploadBuildLogs(XADir, buildStatusProcessed, buildStatusUploaded)
            }
        }

        failure {
            script {
                processAndUploadBuildLogs(XADir, buildStatusProcessed, buildStatusUploaded)
            }
        }
    }
}