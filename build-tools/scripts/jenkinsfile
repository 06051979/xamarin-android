// This file is based on the Jenkins declarative pipeline syntax (as opposed to the scripted pipeline syntax)
// https://jenkins.io/doc/book/pipeline/syntax/
// https://jenkins.io/blog/2017/02/03/declarative-pipeline-ga/

def botLabel = 'xamarin-android-master-pipeline-eval'

def repoUrl = "https://github.com/xamarin/xamarin-android.git"
def XADir = "xamarin-android"

def MSBUILD_AUTOPROVISION_ARGS="/p:AutoProvision=True /p:AutoProvisionUsesSudo=True /p:IgnoreMaxMonoVersion=False"

def buildStatusProcessed = false
def buildStatusUploaded = false

def packageDir = null
def packageTestsDir = null
def isPR = false                // Default to CI

def testErrorsDir = null

def ensurePackageDirExists(packageDir) {
    def status = 0

    if (!packageDir) {
        echo "ERROR : ensurePackageDirExists: packageDir not set"
        status = 1
    }

    if (status == 0 && !fileExists(packageDir)) {
        echo "Creating package directory '${packageDir}'"
        sh "mkdir -p \"${packageDir}\""
    }

    return status
}

def stagePackages(xaDir, packageDir) {
    def status = ensurePackageDirExists(packageDir)

    if (status == 0) {
        try {
            sh "cp xamarin.android-oss*.zip ${packageDir}"
            sh "cp bin/Release/bundle-*.zip ${packageDir}"
            sh "cp bin/Build*/Xamarin.Android.Sdk*.vsix ${packageDir}"
        } catch (error) {
            echo "ERROR : stagePackages: Unexpected error: ${error}"
            status = 1
        }
    }

    return status
}

def processAndStageBuildResults(xaDir, packageDir) {
    def status = 0
    try {
        status = ensurePackageDirExists(packageDir)

        if (status == 0) {
            echo "processing & packaging build status"
            sh "cd ${env.WORKSPACE}/${xaDir}"
            sh "make package-build-status CONFIGURATION=${env.BuildFlavor}"
            sh "cp xa-build-status*.zip ${packageDir}"
        }

    } catch (error) {
        echo "ERROR : processAndStageBuildResults: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def publishPackages(packageDir) {
    def status = 0
    try {
        if (fileExists(packageDir)) {
            sh "cd ${packageDir}"

            echo "Publishing to Azure storage account: https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/7b4817ae-218f-464a-bab1-a9df2d99e1e5/resourceGroups/Group/providers/Microsoft.ClassicStorage/storageAccounts/xamjenkinsartifact/overview"
            step([$class: 'WAStoragePublisher', allowAnonymousAccess: true, cleanUpContainer: false, cntPubAccess: true, containerName: "${env.ContainerName}", doNotFailIfArchivingReturnsNothing: false,
                doNotUploadIndividualFiles: false, doNotWaitForPreviousBuild: true, excludeFilesPath: '',
                filesPath: '*.*', storageAccName: "${env.StorageAccountName}", storageCredentialId: "${env.StorageCredentialId}",
                uploadArtifactsOnlyIfSuccessful: false, usploadZips: false, virtualPath: "${env.StorageVirtualPath}", storageType: 'blobstorage'
            ])
        } else {
            echo "ERROR : publishPackages: packageDir '${packageDir}' does not exist"
            status = 1
        }

    } catch (error) {
        echo "ERROR : publishPackages: Unexpected error: ${error}"
        status = 1
    }

    return status
}

def processAndStageTestErrors(xaDir, packageDir, testErrorsDir) {
    def status = 0
    try {
        status = ensurePackageDirExists(packageDir)

        if (status == 0) {
            echo "processing & packaging xa-test-errors"
            echo "  xaDir: ${xaDir}"
            echo "  packageDir: ${packageDir}"
            echo "  testErrorsDir: ${testErrorsDir}"

            sh """
                cd ${env.WORKSPACE}/${xaDir}
                make package-test-errors

                if [ -d "${testErrorsDir}" ]; then
                    mkdir -p ../package.tests                                           // Note: Signal publishing of the test error logs by creating the directory
                    cp ${testErrorsDir}/*.zip ../package.tests
                fi
            """
        }

    } catch (error) {
        echo "ERROR : processAndStageTestErrors: Unexpected error: ${error}"
        status = 1
    }

    return status
}

pipeline {
    
    agent {
        label "${botLabel}"
    }

    options {
        timestamps()
    }

    stages {
        stage('init') {
            steps {
                script {
                    packageDir = "${env.WORKSPACE}/package"
                    echo "init: packageDir: ${packageDir}"

                    packageTestsDir = "${env.WORKSPACE}/package.tests"
                    echo "init: packageTestsDir: ${packageTestsDir}"

                    testErrorsDir = "${env.WORKSPACE}/${XADir}/package-test-errors"
                    echo "init: testErrorsDir: ${testErrorsDir}"

                    echo "init: env.JOB_BASE_NAME: ${env.JOB_BASE_NAME}"
                    if (env.JOB_BASE_NAME?.toLowerCase().startsWith("xamarin-android-pr")) {
                        echo "Build type: PR"
                        isPR = true
                    } else {
                        echo "Build type: CI"
                    }
                }

                echo "Stage result: init: ${currentBuild.currentResult}"
            }
        }

        stage('clean') {
            steps {
                dir('package') {
                    deleteDir()
                }

                dir('package.tests') {
                    deleteDir()
                }

                dir('xamarin-android@tmp') {
                    deleteDir()
                }

                dir ('xamarin-android/package-test-errors') {
                    deleteDir()
                }

                dir('xamarin-android') {
                    echo "Cleaning build status files "
                    sh "rm -f xa-build-status*.zip"

                    echo "Cleaning test result files"
                    sh "rm -f TestResult-*.xml"

                    sh '''
                    for dir in `ls -d xa-build-status*`; do
                        [ -d "$dir" ] || continue
                        echo "Cleaning directory '${dir}''"
                        rm -rf "$dir"
                    done
                    '''
                }

                dir('xamarin-android') {
                    script {
                        // Avoid: EXEC : error : jnimarshalmethod-gen: Unable to create Java VM
                        def XAInstallPrefix = "bin/${env.BuildFlavor}/lib/xamarin.android"

                        def javaInteropDllConfigFile = "${XAInstallPrefix}/xbuild/Xamarin/Android/Java.Interop.dll.config"
                        if (fileExists(javaInteropDllConfigFile)) {
                            echo "Cleansing file '${javaInteropDllConfigFile}'"
                            sh "rm -f ${javaInteropDllConfigFile}"
                        }

                        def javaEnvironmentConfigFile = "${XAInstallPrefix}/xbuild/Xamarin/Android/Java.Runtime.Environment.dll.config"
                        if (fileExists(javaEnvironmentConfigFile)) {
                            echo "Cleansing file '${javaEnvironmentConfigFile}'"
                            sh "rm -f ${javaEnvironmentConfigFile}"
                        }
                    }
                }

                echo "Stage result: clean: ${currentBuild.currentResult}"
            }   
        }
    
        stage('prepare deps') {
            options {
                timeout(time: 30, unit: 'MINUTES')  // Typically takes less than 2 minutes
            }

            steps {
                dir("$XADir") {
                    sh "make prepare-deps CONFIGURATION=${env.BuildFlavor} V=1 MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                }

                echo "Stage result: prepare deps: ${currentBuild.currentResult}"
            }
        }
        
        stage('build') {
            options {
                timeout(time: 6, unit: 'HOURS')     // Typically takes less than 2 hours
            }
            steps {
                dir("$XADir") {
                    script {
                        if (isPR) {
                            echo "PR build definition detected: building with 'make all'"
                            sh "make all CONFIGURATION=${env.BuildFlavor} V=1 MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                        } else {
                            echo "PR build definition *not* detected: building with 'make jenkins'"
                            sh "make jenkins CONFIGURATION=${env.BuildFlavor} V=1 MSBUILD_ARGS='$MSBUILD_AUTOPROVISION_ARGS'"
                        }
                    }
                }

                echo "Stage result: build: ${currentBuild.currentResult}"
            }
        }
        
        stage('create vsix') {
            options {
                timeout(time: 30, unit: 'MINUTES')  // Typically takes less than 5 minutes
            }

            steps {
                dir("$XADir") {
                    sh "make create-vsix CONFIGURATION=${env.BuildFlavor} V=1"
                }

                echo "Stage result: create vsix: ${currentBuild.currentResult}"
            }
        }
        
        stage('build tests') {
            options {
                timeout(time: 30, unit: 'MINUTES')       // Typically takes 10 minutes
            }

            steps {
                dir("$XADir") {
                    sh "make all-tests CONFIGURATION=${env.BuildFlavor} V=1"
                }

                echo "Stage result: build tests: ${currentBuild.currentResult}"
            }
        }
        
        stage('package build') {
            options {
                timeout(time: 10, unit: 'MINUTES')    // Typically takes less than 1 minute
            }

            steps {
                dir("$XADir") {
                    script {
                        def statusStagePackages = stagePackages(XADir, packageDir)
                        def statusStageBuildResults = processAndStageBuildResults(XADir, packageDir)

                        if (statusStageBuildResults == 0) {
                            buildStatusProcessed = true
                        }

                        if (fileExists('prepare-image-dependencies.sh')) {
                            echo 'Staging prepare-image-dependencies.sh for publishing'
                            sh 'cp prepare-image-dependencies.sh ../package'
                        }

                        if (statusStagePackages != 0) {
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }

                echo "Stage result: package build: ${currentBuild.currentResult}"
            }
        }
        
        stage('publish packages to Azure') {
            options {
                timeout(time: 10, unit: 'MINUTES')    // Typically takes less than 2 minutes
            }

            steps {
                dir('package') {
                    script {
                        def status = publishPackages(packageDir)
                        if (status == 0) {
                            buildStatusUploaded = true
                        }
                    }
                }

                echo "Stage result: publish packages to Azure: ${currentBuild.currentResult}"
            }
        }
        
        stage('run all tests') {
            options {
                timeout(time: 160, unit: 'MINUTES')     // XA tests typically take 1 hr, 40 minutes to run; timeout after 2 hrs, 40 minutes
            }

            steps {
                dir("$XADir") {
                    script {
                        def status = 0
                        try
                        {
                            echo "running tests"
                            status = sh(
                                script: "make run-all-tests CONFIGURATION=${env.BuildFlavor} V=1",
                                returnStatus: true
                            );
                        } catch (error) {
                            echo "ERROR : Unexpected error: ${error}"
                            status = 1
                        } finally {
                            if (status != 0) {
                                echo "ERROR : test run failed with status ${status}. Marking build as UNSTABLE"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }

                        echo "Stage result: run all tests: status: ${status} / current build result: ${currentBuild.currentResult}"
                    }
                }
            }   
        }
        
        stage('package tests') {
            when {
                expression { isPR == true }
            }

            options {
                timeout(time: 30, unit: 'SECONDS')
            }

            steps {
                script {
                    def status = processAndStageTestErrors(XADir, packageTestsDir, testErrorsDir)
                    if (status != 0) {
                        echo "ERROR : NON-FATAL : package test errors failed"       // Note: Simply log that an error occurred, but intentionally don't set the build result to an error state such as 'UNSTABLE'
                    }
                    echo "Stage result: package tests: ${currentBuild.currentResult}"
                }
            }
        }

        stage('publish test error logs to Azure') {
            when {
                expression { isPR == true }
            }

            options {
                timeout(time: 10, unit: 'MINUTES')        // Typically takes less than 2 minutes
            }

            steps {
                script {
                    if (fileExists(packageTestsDir)) {      // Note: fileExists works for directories too
                        echo "SKIP publishing of test error logs even though they exist. Manually check the size of the .ZIP file that we'd otherwise upload"

                        dir(packageTestsDir) {
                            echo "Publishing contents of the package.tests directory to Azure storage"
                            echo "Azure storage account: https://ms.portal.azure.com/#@microsoft.onmicrosoft.com/resource/subscriptions/7b4817ae-218f-464a-bab1-a9df2d99e1e5/resourceGroups/Group/providers/Microsoft.ClassicStorage/storageAccounts/xamjenkinsartifact/overview"

                            try {
                                step([$class: 'WAStoragePublisher', allowAnonymousAccess: true, cleanUpContainer: false, cntPubAccess: true, containerName: "${env.ContainerName}", doNotFailIfArchivingReturnsNothing: false,
                                    doNotUploadIndividualFiles: false, doNotWaitForPreviousBuild: true, excludeFilesPath: '',
                                    filesPath: '*.*', storageAccName: "${env.StorageAccountName}", storageCredentialId: "${env.StorageCredentialId}",
                                    uploadArtifactsOnlyIfSuccessful: false, usploadZips: false, virtualPath: "${env.StorageVirtualPath}", storageType: 'blobstorage'
                                ])
                            } catch (error) {
                                echo "ERROR : NON-FATAL : Unexpected error: ${error}"    // Capture and log an error when attempting to upload test error logs, but don't fail the build
                            }
                        }
                    } else {
                        echo "package.tests directory containing xa-test-error logs does not exist and so skipping publishing of those logs"
                    }

                    echo "Stage result: publish test error logs to Azure: ${currentBuild.currentResult}"
                }
            }
        }
        
        stage ('Plot build & test metrics') {
            options {
                timeout(time: 30, unit: 'SECONDS')      // Typically takes less than a second
            }

            steps {
                dir("$XADir") {
                    plot(
                        title: 'Jcw',                        
                        csvFileName: 'plot-jcw-test-times.csv',       
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.JcwGen_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Locale',
                        csvFileName: 'plot-locale-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Android.Locale_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime test sizes',
                        csvFileName: 'plot-runtime-test-sizes.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Runtime merged',
                        csvFileName: 'plot-runtime-merged-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Mono.Android_Tests-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app startup',
                        csvFileName: 'plot-xamarin-forms-startup-test-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Test-times.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    plot(
                        title: 'Xamarin.Forms app',
                        csvFileName: 'plot-xamarin-forms-tests-size.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Xamarin.Forms_Tests-values.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Tests size', logarithmic: true, style: 'line', yaxis: 'ms'
                    )

                    plot(
                        title: 'Hello World',
                        csvFileName: 'plot-hello-world-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-HelloWorld.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                    
                    plot(
                        title: 'Xamarin.Forms',
                        csvFileName: 'plot-xamarin-forms-integration-build-times.csv',
                        csvSeries: [[
                            displayTableFlag: true, file: 'TestResult-Timing-Xamarin.Forms-Integration.csv', inclusionFlag: 'OFF'
                        ]],
                        group: 'Build times', logarithmic: true, style: 'line', yaxis: 'ms'
                    )
                }

                echo "Stage result: Plot build & test metrics: ${currentBuild.currentResult}"
            }
        }

        stage('Upload test results') {
            options {
                timeout(time: 5, unit: 'MINUTES')       // Typically takes under 1 minute to upload test results
            }

            steps {
                dir("$XADir") {
                    script {
                        try {
                            xunit thresholds: [
                                    failed(unstableNewThreshold: '0', unstableThreshold: '0'),
                                    skipped()                                                       // Note: Empty threshold settings per settings in the xamarin-android freestyle build are not permitted here
                                ],
                                tools: [
                                    NUnit2(deleteOutputFiles: true,
                                    failIfNotNew: true,
                                    pattern: 'TestResult-*.xml',
                                    skipNoTestFiles: true,
                                    stopProcessingIfError: false)
                                ]
                        } catch (error) {
                            echo "ERROR : Upload test results: Unexpected error: ${error}. Marking build as UNSTABLE"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }

                echo "Stage result: Upload test results: ${currentBuild.currentResult}"
            }
        }
    }

    post {
        // Attempt to process & upload build results if the initial attempt to process and upload the logs failed
        always {
            script {
                def status = 0
                if (!buildStatusUploaded) {
                    echo "ERROR : RETRYING: Build status logs failed during the 'package build' and/or 'publish packages to Azure' stages"

                    if (!buildStatusProcessed) {
                        echo "Retrying packaging of build status logs"
                        status = processAndStageBuildResults(XADir, packageDir)
                    }

                    if (status == 0) {
                        echo "Retrying publishing of build status logs"
                        status = publishPackages(packageDir)

                        if (status != 0) {
                            echo "ERROR : Publishing of build status logs failed"
                        }

                    } else {
                        echo "ERROR : Packaging of build status logs failed"
                    }
                }
            }
        }
    }
}